// see http://web-design-weekly.com/2013/05/12/handy-sass-mixins/ for usage examples

// Center Block
@mixin center($columns, $context: $total-columns) {
  width: columns($columns, $context);
  margin: 0 auto;
}


// Responsive Breakpoints - I've replaced this with _breakpoint.scss
/*
@mixin breakpoint($point) {
  @if $point == large {
    @media (min-width: 64.375em) { @content; }
  }
  @else if $point == medium {
    @media (min-width: 50em) { @content; }
  }
  @else if $point == small {
    @media (min-width: 37.5em)  { @content; }
  }
}
*/


// Size
@mixin size($args) {
	@if length($args) == 2 {
		width: nth($args, 1);
		height: nth($args, 2);
	}
	@else {
		width: $args;
		height: $args;
	}
}


// Positioning
@mixin position($position, $args) {
	@each $dir in top, left, bottom, right {
		$i: index($args, $dir);
		@if $i {
			#{$dir}: nth($args, $i + 1);
		}
	}
	position: $position;
}
 
@mixin absolute($args) {
	@include position(absolute, $args);
}

@mixin relative($args) {
	@include position(relative, $args);
}

@mixin fixed($args) {
	@include position(fixed, $args);
}


// Retina Images
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}


// Box Sizing
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}


// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}


// Single side border-radius
@mixin border-top-radius($radius) {
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
	background-clip: padding-box;
}
@mixin border-right-radius($radius) {
 	 -webkit-border-bottom-right-radius: $radius;
 	 border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  	-webkit-border-bottom-right-radius: $radius;
  	border-bottom-right-radius: $radius;
  	-webkit-border-bottom-left-radius: $radius;
  	border-bottom-left-radius: $radius;
  	background-clip: padding-box;
}
@mixin border-left-radius($radius) {
 	 -webkit-border-bottom-left-radius: $radius;
 	 border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}


// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}


// Center-align a block level element
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}


// Text Overflow
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


// Absolute Positioned
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}


// Font Size
@mixin font-size($sizeValue: 12 ){
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.125 * $sizeValue) + rem;
}


// Line Height
@mixin line-height($heightValue: 12 ){
	line-height: $heightValue + px; //fallback for old browsers
	line-height: (0.125 * $heightValue) + rem;
}


// Shapes
@mixin circle($size) {
	@include size($size);
	border-radius: 50%;
}
 
@mixin rounded-box($size, $corners) {
	@include size($size);
	@include inline-border-radius($corners);
}
 
@mixin inline-border-radius($args) {
	@if length($args) == 4 {
		$dirs: (top-left, 1),
		(top-right, 2),
		(bottom-right, 3),
		(bottom-left, 4);
		@each $dir, $i in $dirs {
			border-#{$dir}-radius: nth($args, $i);
		}
	}
	@else if length($args) == 2 {
		@include border-top-radius(nth($args, 1));
		@include border-bottom-radius(nth($args, 2));
	}
	@else if length($args) == 1 {
		border-radius: $args;
	}
}

